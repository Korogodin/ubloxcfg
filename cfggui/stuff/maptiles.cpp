/* ************************************************************************************************/ // clang-format off
// flipflip's cfggui
//
// Copyright (c) Philippe Kehl (flipflip at oinkzwurgl dot org),
// https://oinkzwurgl.org/hacking/ubloxcfg
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with this program.
// If not, see <https://www.gnu.org/licenses/>.

#include <cmath>
#include <cstring>
#include <fstream>

#include <filesystem>

#include <curl/curl.h>

#include "config.h"
#include "ff_debug.h"
#include "ff_stuff.h"
#include "ff_cpp.hpp"
#include "ff_trafo.h"
#include "ff_utils.hpp"
#include "stb_image.h"

#include "platform.hpp"

#include "maptiles.hpp"

/* ****************************************************************************************************************** */

// https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames
// https://wiki.openstreetmap.org/wiki/Zoom_levels
// https://wiki.openstreetmap.org/wiki/Precision_of_coordinates

/*static*/ Ff::Vec2<double> MapTiles::LonLatToTileXy(const Ff::Vec2<double> &lonLat, const int tz)
{
    const double p = std::pow(2.0, tz);
    const double tx = (lonLat.x + M_PI) / (2.0 * M_PI) * p;
    const double ty = (1.0 - std::asinh(std::tan(lonLat.y)) / M_PI) / 2.0 * p;
    return { tx, ty };
}

/*static*/ Ff::Vec2<float> MapTiles::LonLatToTileXy(const Ff::Vec2<float> &lonLat, const int tz)
{
    const float p = std::pow(2.0f, tz);
    const float tx = (lonLat.x + M_PI) / (float)(2.0 * M_PI) * p;
    const float ty = (1.0 - std::asinh(std::tan(lonLat.y)) / (float)M_PI) / 2.0f * p;
    return { tx, ty };
}

/*static*/ Ff::Vec2<double> MapTiles::TileXyToLonLat(const Ff::Vec2<double> &tXy, const int tz)
{
    const double p = std::pow(2.0, tz);
    const double lon = ( tXy.x / p * (2.0 * M_PI) ) - M_PI;
    const double n = M_PI - ((2.0 * M_PI) * tXy.y / p);
    const double lat = std::atan( 0.5 * (std::exp(n) - std::exp(-n)) );
    return { lon, lat };
}

/*static*/ Ff::Vec2<float> MapTiles::TileXyToLonLat(const Ff::Vec2<float> &tXy, const int tz)
{
    const float p = std::pow(2.0f, tz);
    const float lon = ( tXy.x / p * (float)(2.0 * M_PI) ) - (float)M_PI;
    const float n = (float)M_PI - ((float)(2.0 * M_PI) * tXy.y / p);
    const float lat = std::atan( 0.5f * (std::exp(n) - std::exp(-n)) );
    return { lon, lat };
}

/* ****************************************************************************************************************** */

/*static*/ std::unordered_map<MapTiles::Coord, MapTiles::Tile, MapTiles::CoordHash> MapTiles::_tiles {};
/*static*/ std::mutex                                          MapTiles::_tilesMutex { };
/*static*/ OpenGL::ImageTexture  MapTiles::_tileLoadTex      { };
/*static*/ OpenGL::ImageTexture  MapTiles::_tileFailTex      { };
/*static*/ OpenGL::ImageTexture  MapTiles::_tileNopeTex      { };
/*static*/ OpenGL::ImageTexture  MapTiles::_tileTestTex      { };
/*static*/ uint32_t              MapTiles::_lastHousekeeping { 0 };
/*static*/ std::string           MapTiles::_debugText        { };
/*static*/ int                   MapTiles::_numInstances     { 0 };
/*static*/ MapTiles::DebugStats  MapTiles::_debugStats       { };

MapTiles::DebugStats::DebugStats() :
    numTiles{0}, numAvail{0}, numLoad{0}, numFail{0}, numOutside{0}
{
}

/*static*/ const MapTiles::DebugStats &MapTiles::GetStats()
{
    return _debugStats;
}

/* ****************************************************************************************************************** */

MapTiles::MapTiles(const MapParams &mapParams) :
    _mapParams          { mapParams },
    _mapParamsUid       { std::hash<std::string>()(mapParams.name) },
    _subDomainIx        { 0 }
{
    _numInstances++;
    DEBUG("MapTiles(%s) #%d", _mapParams.name.c_str(), _numInstances);

    // Load built-in tiles once
    if (_tileLoadTex.GetImageTexture() == 0)
    {
        _tileLoadTex = OpenGL::ImageTexture(TILE_LOAD_PNG, sizeof(TILE_LOAD_PNG));
    }
    if (_tileFailTex.GetImageTexture() == 0)
    {
        _tileFailTex = OpenGL::ImageTexture(TILE_FAIL_PNG, sizeof(TILE_FAIL_PNG));
    }
    if (_tileNopeTex.GetImageTexture() == 0)
    {
        _tileNopeTex = OpenGL::ImageTexture(TILE_NOPE_PNG, sizeof(TILE_NOPE_PNG));
    }
    if (_tileTestTex.GetImageTexture() == 0)
    {
        _tileTestTex = OpenGL::ImageTexture(TILE_TEST_PNG, sizeof(TILE_TEST_PNG));
    }

    // Is the map using a single, built-in tile?
    if (_mapParams.downloadUrl == "builtin://test")
    {
        _builtInTile = _tileTestTex.GetImageTexture();
    }
    else if (_mapParams.downloadUrl == "builtin://nope")
    {
        _builtInTile = _tileNopeTex.GetImageTexture();
    }
    else if (_mapParams.downloadUrl == "builtin://fail")
    {
        _builtInTile = _tileFailTex.GetImageTexture();
    }
    else if (_mapParams.downloadUrl == "builtin://load")
    {
        _builtInTile = _tileLoadTex.GetImageTexture();
    }
    else
    {
        _builtInTile = nullptr;
    }

    // Create threads
    for (uint32_t n = 0; n < _mapParams.threads; n++)
    {
        std::string name = "tiles" + std::to_string(n);
        auto thread = std::make_unique<Ff::Thread>(name, std::bind(&MapTiles::_Thread, this, std::placeholders::_1));
        thread->Start();
        _threads.push_back(std::move(thread));
    }
}

MapTiles::~MapTiles()
{
    DEBUG("~MapTiles() %d", _numInstances);
    _numInstances--;

    for (auto &thread: _threads)
    {
        thread->Stop();
        thread = nullptr;
    }

    // Destroy textures when last instance closes, because the destructors of these static
    // variables would only be called on program exit(), when the OpenGL context has been
    // invalidated already.
    if (_numInstances == 0)
    {
        _tiles.clear();
        _tileLoadTex.Destroy();
        _tileFailTex.Destroy();
        _tileNopeTex.Destroy();
        _tileTestTex.Destroy();
        _debugStats = DebugStats();
    }
}

// ---------------------------------------------------------------------------------------------------------------------

MapTiles::Coord::Coord(const std::size_t _uid, const int _x, const int _y, const int _z) :
    uid{_uid}, x{_x}, y{_y}, z{_z}
{
}

// for std::unordered_map key comparison
bool MapTiles::Coord::operator==(const MapTiles::Coord &other) const
{
    return (x == other.x) && (y == other.y) && (z == other.z);
}

// for std::unordered_map key hashing
std::size_t MapTiles::CoordHash::operator() (const MapTiles::Coord &coord) const
{
    const std::size_t hx = std::hash<int>()(coord.x);
    const std::size_t hy = std::hash<int>()(coord.y);
    const std::size_t hz = std::hash<int>()(coord.z);
    return coord.uid ^ hx ^ hy ^ hz;;
}

// ---------------------------------------------------------------------------------------------------------------------

MapTiles::Tile::Tile(const MapTiles::Tile::State_e _state) :
    state{_state}, lastUsed{TIME()}
{
}

// ---------------------------------------------------------------------------------------------------------------------

void MapTiles::_Cleanup(const uint32_t now)
{
    // Housekeeping
    if ((now - _lastHousekeeping) > HOUSEKEEPING_INT)
    {
        _lastHousekeeping = now;
        DebugStats stats;
        if (_tiles.size() > 0)
        {
            const uint32_t tilesNow = TIME();
            for (auto iter = _tiles.begin(); iter != _tiles.end(); )
            {
                stats.numTiles++;
                auto &entry = *iter;
                auto &tile = entry.second;
                // Remove old tile from DB (and thereby free texture)
                switch (tile.state)
                {
                    case Tile::AVAILABLE:
                        if ((tilesNow - tile.lastUsed) > TILE_MAX_AGE)
                        {
                            iter = _tiles.erase(iter);
                            continue;
                        }
                        stats.numAvail++;
                        break;
                    case Tile::FAILED:
                        if ((tilesNow - tile.lastUsed) > TILE_MAX_AGE_FAILED)
                        {
                            iter = _tiles.erase(iter);
                            continue;
                        }
                        stats.numFail++;
                        break;
                    case Tile::OUTSIDE:
                        stats.numOutside++;
                        break;
                    case Tile::LOADING:
                        stats.numLoad++;
                        break;
                }
                iter++;
            }
        }
        _debugStats = stats;
    }
}

// ---------------------------------------------------------------------------------------------------------------------

int MapTiles::NumTilesInQueue()
{
    return (int)_requestQueue.size();
}

// ---------------------------------------------------------------------------------------------------------------------

void *MapTiles::GetTileTex(const int tx, const int ty, const int tz)
{
    if ( (tz < _mapParams.zoomMin) || (tz > _mapParams.zoomMax) )
    {
        return _tileNopeTex.GetImageTexture();
    }

    if (_builtInTile)
    {
        //DEBUG("use builtin %u", (GLuint)(uintptr_t)_builtInTile);
        return _builtInTile;
        //return (void *)(intptr_t)26;
    }

    const uint32_t now = TIME();
    _Cleanup(now);

    Coord coord { _mapParamsUid, tx, ty, tz };
    auto entry = _tiles.find(coord);

    // Tile known (available, loading, failed to load, or outside of this map's area)
    if (entry != _tiles.end())
    {
        auto &tile = entry->second;
        switch (tile.state)
        {
            case Tile::AVAILABLE:
                tile.lastUsed = now;
                return tile.tex.GetImageTexture();
            case Tile::LOADING:
                if (tile.path.empty())
                {
                    return _tileLoadTex.GetImageTexture();
                }
                else
                {
                    std::lock_guard<std::mutex> lock(_tilesMutex);
                    tile.tex = OpenGL::ImageTexture(tile.path);
                    if (tile.tex.GetImageTexture())
                    {
                        tile.state = Tile::AVAILABLE;
                        return tile.tex.GetImageTexture();
                    }
                    else
                    {
                        tile.state = Tile::FAILED;
                        return _tileFailTex.GetImageTexture();
                    }
                }
            case Tile::FAILED:
                return _tileFailTex.GetImageTexture();
            case Tile::OUTSIDE:
                return _tileNopeTex.GetImageTexture();
        }
    }
    // else: Tile unknown

    // Check if it is within range
    const auto llMin = TileXyToLonLat(Ff::Vec2<float>(tx, ty + 1.0), tz);
    const auto llMax = TileXyToLonLat(Ff::Vec2<float>(tx + 1.0, ty), tz);

    // Request tile to be loaded (if tile rect overlaps with coverage rect)
    if ( (llMin.x < _mapParams.maxLon) && (llMax.x > _mapParams.minLon) && (llMax.y > _mapParams.minLat) && (llMin.y < _mapParams.maxLat) )
    {
        // Create tile
        {
            std::lock_guard<std::mutex> lock(_tilesMutex);
            _tiles.insert( { coord, Tile(Tile::LOADING) } );
        }

        // Schedule it for downloading
        std::lock_guard<std::mutex> lock(_requestMutex);
        _requestQueue.push(coord);

        // Notify threads
        for (auto &thread: _threads)
        {
            thread->Wakeup();
        }

        // Use the "loading" tile until the thread has loaded the tile (or failed doing so)
        return _tileLoadTex.GetImageTexture();

    }
    // Mark as outside of map coverage
    else
    {
        std::lock_guard<std::mutex> lock(_tilesMutex);
        _tiles.insert( { coord, Tile(Tile::OUTSIDE) } );

        return _tileNopeTex.GetImageTexture();
    }
}

/* ****************************************************************************************************************** */

void MapTiles::_Thread(Ff::Thread *thread)
{
    while (!thread->ShouldAbort())
    {
        // Get next request
        std::unique_ptr<Coord> coord;
        {
            std::lock_guard<std::mutex> lock(_requestMutex);
            if (!_requestQueue.empty())
            {
                if ((int)_requestQueue.size() > MAX_TILES_IN_QUEUE)
                {
                    WARNING("Too many tiles requested!");
                    while ((int)_requestQueue.size() > MAX_TILES_IN_QUEUE)
                    {
                        std::lock_guard<std::mutex> lockTiles(_tilesMutex);
                        _tiles[_requestQueue.front()].state = Tile::FAILED;
                        _requestQueue.pop();
                    }
                }

                coord = std::make_unique<Coord>(_requestQueue.front());
                _requestQueue.pop();
            }
        }

        // Process request
        if (coord)
        {
            std::string file = _mapParams.cachePath;
            Ff::StrReplace(file, "{x}", std::to_string(coord->x));
            Ff::StrReplace(file, "{y}", std::to_string(coord->y));
            Ff::StrReplace(file, "{z}", std::to_string(coord->z));

            // Full path to cache file
            std::filesystem::path path = Platform::CacheDir("tiles");
            path /= _mapParams.name;
            for (auto &part: Ff::StrSplit(file, "/"))
            {
                path /= part;
            }
            //DEBUG("thread %s request %s: %s", thread->GetName().c_str(), req->key.c_str(), file.c_str());

            // Download
            if (std::filesystem::exists(path))
            {
                //DEBUG("Cached %s (%s)", path.c_str(), thread->GetName().c_str());
                std::lock_guard<std::mutex> lock(_tilesMutex);
                _tiles[*coord].path = path;
            }
            // Download
            else
            {
                // https://wiki.openstreetmap.org/wiki/Tile_servers
                std::string url = _mapParams.downloadUrl;
                Ff::StrReplace(url, "{x}", std::to_string(coord->x));
                Ff::StrReplace(url, "{y}", std::to_string(coord->y));
                Ff::StrReplace(url, "{z}", std::to_string(coord->z));
                if (_mapParams.subDomains.size() > 0)
                {
                    const int ix = _subDomainIx++ % _mapParams.subDomains.size();
                    Ff::StrReplace(url, "{s}", _mapParams.subDomains[ix]);
                }
                //DEBUG("Download %s (%s)", url.c_str(), thread->GetName().c_str());
                if (_DownloadTile(url, path, _mapParams.downloadTimeout, _mapParams.referer))
                {
                    std::lock_guard<std::mutex> lock(_tilesMutex);
                    _tiles[*coord].path = path.string();
                }
            }

            // Check if there are more requests
            continue;
        }

        // Wait for more requests
        thread->Sleep(1234);
    }
}

// ---------------------------------------------------------------------------------------------------------------------

/*static*/ size_t MapTiles::_DownloadWriteCb(char *ptr, size_t size, size_t nmemb, void *userdata)
{
    size_t totalSize = size * nmemb;
    std::vector<uint8_t> *vec = (std::vector<uint8_t> *)userdata;
    vec->insert(vec->end(), ptr, ptr + totalSize);
    return totalSize;
}

bool MapTiles::_DownloadTile(const std::string &url, const std::string &path, uint32_t timeout, const std::string &referer)
{
    bool res = true;
    CURL *curl = NULL;
    FILE *file = NULL;
    try
    {
        // Create destination directory
        std::filesystem::path dir = std::filesystem::path(path).parent_path();
        std::filesystem::create_directories(dir);

        // Buffer to download the image data into
        std::vector<uint8_t> data {};

        // Setup curl
        // https://curl.haxx.se/libcurl/c/curl_easy_setopt.html
        curl = curl_easy_init();
        if ( (curl == NULL) ||
            (curl_easy_setopt(curl, CURLOPT_URL,            url.c_str())                                      != CURLE_OK) ||
          //(curl_easy_setopt(curl, CURLOPT_VERBOSE,        true)                                             != CURLE_OK) ||
            (curl_easy_setopt(curl, CURLOPT_USERAGENT ,     "cfggui/" CONFIG_VERSION " (" CONFIG_GITHASH ")") != CURLE_OK) ||
            ( !referer.empty() &&
            (curl_easy_setopt(curl, CURLOPT_REFERER,        referer.c_str())                                  != CURLE_OK)) ||
            (curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true)                                             != CURLE_OK) ||
            (curl_easy_setopt(curl, CURLOPT_TIMEOUT_MS,     (long)(timeout > 1000 ? timeout : 5000))          != CURLE_OK) ||
            (curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION,  _DownloadWriteCb)                                 != CURLE_OK) ||
            (curl_easy_setopt(curl, CURLOPT_WRITEDATA,      &data)                                            != CURLE_OK) )
        {
            throw std::runtime_error("Curl init failed");
        }

        data.reserve(CURL_MAX_WRITE_SIZE);

        // Initiate download
        const CURLcode curlRes = curl_easy_perform(curl);
        if (curlRes != CURLE_OK)
        {
            throw std::runtime_error(Ff::Sprintf("Failed downloading %s: %s", url.c_str(), curl_easy_strerror(curlRes)));
        }

        // Check response code if HTTP(S)
        if (url.substr(0, 4) == "http")
        {
            long respCode = -1;
            if ( (curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &respCode) != CURLE_OK) || (respCode != 200) )
            {
                throw std::runtime_error(Ff::Sprintf("Failed downloading %s: code %ld", url.c_str(), respCode));
            }
        }

        // Check if data is valid image data
        int width = 0;
        int height = 0;
        stbi_set_flip_vertically_on_load(false);
        uint8_t *imageData = stbi_load_from_memory(data.data(), (int)data.size(), &width, &height, NULL, 4);
        if (imageData == NULL)
        {
            throw std::runtime_error(Ff::Sprintf("Failed downloading %s: no (known) image data", url.c_str()));
        }
        stbi_image_free(imageData);

        // Store data
        if (!Platform::FileSpew(path, data.data(), data.size(), false))
        {
            res = false;
        }
    }
    catch (const std::exception &e)
    {
        ERROR("Tile download fail: %s", e.what());
        res = false;
    }

    if (curl != NULL)
    {
        curl_easy_cleanup(curl);
    }
    if (file != NULL)
    {
        fclose(file);
    }

    return res;
}

/* ****************************************************************************************************************** */

// Made from cfggui/*.png using 'xxd -i cffgui/....png'

/*static*/ const uint8_t MapTiles::TILE_LOAD_PNG[] =
{
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x5c, 0x72, 0xa8, 0x66, 0x00, 0x00, 0x00,
    0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9,
    0x43, 0xbb, 0x7f, 0x00, 0x00, 0x03, 0x82, 0x49, 0x44, 0x41, 0x54, 0x78,
    0xda, 0xed, 0xdd, 0xc1, 0x4e, 0xea, 0x40, 0x18, 0x86, 0xe1, 0x5f, 0x3a,
    0x40, 0x45, 0x37, 0x24, 0x46, 0xef, 0x80, 0xfb, 0xbf, 0x28, 0x57, 0x6c,
    0x88, 0x1b, 0x2d, 0xa1, 0x55, 0x2e, 0x40, 0x12, 0x13, 0x81, 0xe9, 0xb4,
    0xf3, 0x3c, 0xfb, 0x93, 0xef, 0x14, 0x4f, 0xde, 0x4c, 0x4f, 0x1c, 0x7d,
    0xd8, 0xed, 0x76, 0x3f, 0x71, 0x85, 0xae, 0xeb, 0xae, 0xf9, 0xe3, 0xd1,
    0xb6, 0x6d, 0xd8, 0xb7, 0x6f, 0x7f, 0x9c, 0xfd, 0x45, 0x00, 0xd5, 0x12,
    0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00,
    0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0xa0, 0x74, 0xc9, 0x7d, 0x6a, 0xfb,
    0xf6, 0xeb, 0xdd, 0x77, 0x02, 0x00, 0xaf, 0x00, 0x80, 0x00, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0xc5, 0x4a, 0xee, 0x53, 0xdb, 0xb7, 0x5f, 0xef, 0xbe, 0x13,
    0x00, 0x78, 0x05, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01,
    0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x28, 0x56, 0x72,
    0x9f, 0xda, 0xbe, 0xfd, 0x7a, 0xf7, 0x9d, 0x00, 0xc0, 0x2b, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x40, 0xb1, 0x92, 0xfb, 0xd4, 0xf6, 0xed, 0xd7,
    0xbb, 0xef, 0x04, 0x00, 0x5e, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10,
    0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00,
    0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00,
    0x8a, 0x95, 0xdc, 0xa7, 0xb6, 0x6f, 0xbf, 0xde, 0x7d, 0x27, 0x00, 0xf0,
    0x0a, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x50, 0xac, 0xe4, 0x3e, 0xb5,
    0x7d, 0xfb, 0xf5, 0xee, 0x3b, 0x01, 0x80, 0x57, 0x00, 0x40, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04,
    0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00,
    0xa0, 0x74, 0x69, 0xae, 0x0f, 0xb6, 0x7e, 0x6d, 0xe3, 0xf1, 0x6d, 0x73,
    0xf7, 0x9d, 0x36, 0x36, 0x71, 0x3c, 0x74, 0xf1, 0xf5, 0xfe, 0x39, 0xeb,
    0xe7, 0x8c, 0x88, 0xe8, 0x3f, 0x4e, 0xd1, 0xef, 0x4f, 0xa3, 0x3c, 0x67,
    0xb3, 0x4d, 0xb1, 0x7c, 0x59, 0x5d, 0xfc, 0xfc, 0xe7, 0xf4, 0x9c, 0xd9,
    0x03, 0x30, 0xd7, 0xfb, 0xd4, 0x4d, 0x93, 0xaf, 0x6d, 0xcd, 0xa2, 0xf9,
    0xf7, 0xe7, 0x70, 0xed, 0xf3, 0x3f, 0x6d, 0x9f, 0xb3, 0x3d, 0xe7, 0xf0,
    0x3d, 0xfc, 0xfa, 0xfb, 0xe6, 0xfa, 0xfa, 0xaf, 0x87, 0x36, 0x96, 0xb1,
    0x1a, 0xed, 0x39, 0xa7, 0xf6, 0xef, 0xdf, 0x2b, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0xc0, 0xe4, 0xa5, 0xb9, 0xfe, 0x7e, 0xf4, 0x52,
    0xef, 0x8f, 0xdf, 0xfa, 0xf9, 0xfb, 0xa1, 0xcf, 0xf6, 0x9c, 0x97, 0x7e,
    0xee, 0x41, 0xae, 0xaf, 0x7f, 0xa9, 0x3f, 0xdf, 0x61, 0xea, 0x3f, 0x4f,
    0xc3, 0x09, 0x00, 0xbc, 0x02, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x4c, 0xd2, 0x6c, 0x7f, 0x39, 0xe8, 0x71, 0xdf, 0xc5, 0x71,
    0xff, 0xf7, 0xf7, 0x49, 0x8f, 0xfd, 0xbd, 0xd8, 0xb9, 0x9e, 0xf3, 0x5e,
    0xcf, 0x9f, 0xcb, 0x70, 0xe8, 0x63, 0x38, 0xf4, 0x37, 0xff, 0xfc, 0xa7,
    0xf2, 0xfc, 0x4e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0xdc, 0xe2, 0xff,
    0x00, 0xa6, 0x7e, 0x9f, 0xd9, 0xbe, 0x7d, 0xfb, 0x4e, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x33, 0x94, 0xdc, 0xa7, 0xb6, 0x6f,
    0xbf, 0xde, 0x7d, 0x27, 0x00, 0xf0, 0x0a, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x50, 0xac, 0xe4, 0x3e, 0xb5, 0x7d, 0xfb, 0xf5, 0xee, 0x3b, 0x01,
    0x80, 0x57, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00,
    0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x80, 0x62, 0x25, 0xf7,
    0xa9, 0xed, 0xdb, 0xaf, 0x77, 0xdf, 0x09, 0x00, 0xbc, 0x02, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x14, 0x2b, 0xb9, 0x4f, 0x6d, 0xdf, 0x7e, 0xbd,
    0xfb, 0x4e, 0x00, 0xe0, 0x15, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01,
    0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0xa0,
    0x58, 0xc9, 0x7d, 0x6a, 0xfb, 0xf6, 0xeb, 0xdd, 0x77, 0x02, 0x00, 0xaf,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xc5, 0x4a, 0xee, 0x53, 0xdb,
    0xb7, 0x5f, 0xef, 0xbe, 0x13, 0x00, 0x78, 0x05, 0x00, 0x04, 0x00, 0x10,
    0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00,
    0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00,
    0x04, 0x00, 0x28, 0xd6, 0x19, 0xf0, 0x39, 0xb2, 0x84, 0xcf, 0x1e, 0xa7,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
    0x82
};

/*static*/ const uint8_t MapTiles::TILE_FAIL_PNG[] =
{
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x08, 0x02, 0x00, 0x00, 0x00, 0xd3, 0x10, 0x3f, 0x31, 0x00, 0x00, 0x08,
    0xab, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0xdd, 0x5d, 0x6f, 0xdb,
    0x36, 0x14, 0xc6, 0x71, 0x92, 0xa2, 0xe4, 0xd7, 0xa4, 0x4d, 0xb7, 0x15,
    0xc3, 0xae, 0xb6, 0x5d, 0xe4, 0xfb, 0x7f, 0x9e, 0x61, 0xc0, 0x76, 0xb1,
    0x0d, 0xc5, 0xda, 0x26, 0x69, 0xec, 0xd8, 0xb2, 0xf5, 0xc2, 0x5d, 0x14,
    0x5b, 0x97, 0xc2, 0x8e, 0x2c, 0xf3, 0x34, 0xe2, 0xa9, 0xfe, 0xbf, 0xdb,
    0x06, 0x84, 0xed, 0xea, 0x11, 0x0f, 0x29, 0x8a, 0xb4, 0xd7, 0xd7, 0xd7,
    0xa6, 0x8f, 0xb2, 0x2c, 0x7b, 0xfd, 0xfd, 0x74, 0x3a, 0xa5, 0x7d, 0xda,
    0x4f, 0xb6, 0x7d, 0x67, 0x80, 0x11, 0x23, 0x00, 0x20, 0x00, 0x00, 0x01,
    0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x80, 0x00,
    0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00,
    0x00, 0x02, 0x00, 0x68, 0xe6, 0x59, 0x5f, 0x4e, 0xfb, 0x63, 0x6e, 0x9f,
    0x1e, 0x00, 0x94, 0x40, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00,
    0x02, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00,
    0x01, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x40,
    0x29, 0xcf, 0xfa, 0x72, 0xda, 0x1f, 0x73, 0xfb, 0xf4, 0x00, 0xa0, 0x04,
    0x02, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x80, 0x00,
    0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00,
    0x00, 0x02, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x4a, 0x71, 0x3e, 0x00,
    0xed, 0x8f, 0xba, 0x7d, 0x7a, 0x00, 0x50, 0x02, 0x01, 0x04, 0x00, 0x20,
    0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00, 0x80, 0xaf, 0x9c, 0xe7,
    0x27, 0x40, 0x3c, 0x6b, 0xcc, 0xcf, 0x8b, 0x45, 0xe1, 0xba, 0xef, 0xa7,
    0x59, 0x9e, 0x1f, 0xfb, 0xa7, 0x9b, 0xaa, 0xba, 0xa9, 0x2a, 0x7a, 0x00,
    0xe8, 0xf3, 0x5d, 0x51, 0x9c, 0x72, 0xf5, 0x3f, 0xa1, 0x0e, 0xe1, 0xf6,
    0xd9, 0xaf, 0x7e, 0x02, 0x00, 0x01, 0x85, 0xb5, 0x57, 0x93, 0x49, 0x64,
    0x23, 0x77, 0x55, 0x15, 0x18, 0x03, 0x40, 0xa3, 0xef, 0xa7, 0xd3, 0xc8,
    0xcb, 0xa8, 0x0a, 0xe1, 0xae, 0xae, 0x19, 0x04, 0x43, 0x9f, 0x0b, 0xef,
    0x17, 0x3e, 0x76, 0x24, 0x39, 0x48, 0xf1, 0x43, 0x00, 0x20, 0x30, 0xf6,
    0x7d, 0x1d, 0x5d, 0xfc, 0x54, 0x6d, 0x7b, 0x3f, 0xd0, 0xed, 0xdf, 0x30,
    0x0b, 0x84, 0x18, 0x2f, 0xbd, 0x2f, 0xac, 0x8d, 0xbd, 0xfd, 0x0f, 0x77,
    0xf5, 0xd3, 0x03, 0x20, 0xea, 0xd2, 0x79, 0x79, 0x7c, 0x4e, 0xf3, 0xf4,
    0xea, 0x7f, 0x35, 0x68, 0x00, 0x38, 0x1f, 0x80, 0xf6, 0xcf, 0x6c, 0xff,
    0x87, 0xe9, 0xd4, 0xd4, 0x75, 0xd6, 0x33, 0x03, 0xcd, 0xe3, 0x72, 0xff,
    0x6d, 0x59, 0x6e, 0x9f, 0x1c, 0x00, 0x70, 0x3e, 0x00, 0x52, 0x34, 0x71,
    0xee, 0x52, 0xe2, 0xf6, 0x7f, 0x33, 0xdc, 0xf0, 0x97, 0x00, 0xe0, 0x7c,
    0xaf, 0x27, 0x13, 0x1b, 0xdd, 0xc8, 0x87, 0xfd, 0x3e, 0x85, 0x42, 0x0e,
    0xe8, 0x67, 0xe6, 0x5c, 0xfc, 0xd4, 0x67, 0x13, 0xc2, 0xfb, 0xa1, 0x6f,
    0xff, 0x04, 0x00, 0x83, 0xdd, 0xfe, 0xef, 0xab, 0xaa, 0x0d, 0x81, 0x00,
    0x40, 0x99, 0x65, 0x96, 0xcd, 0xa3, 0x6f, 0xff, 0xc1, 0x98, 0x77, 0x09,
    0xd4, 0x3f, 0x04, 0x00, 0xbd, 0x7d, 0x1b, 0xfd, 0xe4, 0xcb, 0x18, 0xb3,
    0xae, 0xeb, 0x3a, 0x81, 0xdb, 0x3f, 0x01, 0x40, 0xef, 0xdb, 0xff, 0x2c,
    0xcb, 0xe2, 0xdb, 0xb9, 0xd9, 0xed, 0x12, 0xf9, 0x46, 0x04, 0x00, 0xcf,
    0x7d, 0xfb, 0x2f, 0x9b, 0x66, 0xd3, 0xb6, 0x04, 0x00, 0x23, 0xbd, 0xfd,
    0xdf, 0x26, 0x30, 0xf9, 0x43, 0x00, 0xd0, 0xdb, 0x37, 0x12, 0xb7, 0xff,
    0x26, 0x84, 0x3b, 0x02, 0x00, 0x75, 0x66, 0xce, 0xcd, 0x25, 0x6e, 0xff,
    0xab, 0x94, 0xae, 0x7e, 0x02, 0x80, 0x67, 0xad, 0xfe, 0x8d, 0x31, 0x37,
    0x04, 0x00, 0xea, 0x14, 0x12, 0x8f, 0x7e, 0x8d, 0x31, 0x65, 0xdb, 0xee,
    0x92, 0x19, 0xfe, 0x12, 0x00, 0x9c, 0x5c, 0xfd, 0x17, 0x85, 0x95, 0x68,
    0x67, 0xd8, 0x95, 0xcf, 0x04, 0x00, 0x67, 0x5d, 0x22, 0xd6, 0x5e, 0x4a,
    0xdc, 0xfe, 0x5b, 0x63, 0xee, 0xd3, 0x0b, 0x00, 0xe7, 0x03, 0xd0, 0x7e,
    0x47, 0xfb, 0x57, 0xde, 0xe7, 0x45, 0x71, 0xec, 0xef, 0x9b, 0x93, 0x6b,
    0xfa, 0x55, 0x55, 0x6d, 0xcb, 0x92, 0xf3, 0x01, 0xa0, 0xcc, 0x45, 0xf4,
    0xba, 0xff, 0x8f, 0x3e, 0x24, 0x36, 0xfc, 0x25, 0x00, 0xe8, 0x36, 0xcf,
    0xb2, 0xf8, 0xb7, 0x7e, 0x8d, 0x31, 0x75, 0x08, 0xab, 0xa6, 0x21, 0x00,
    0x50, 0xe6, 0x85, 0x97, 0xd9, 0x36, 0xe1, 0x21, 0xbd, 0xea, 0x9f, 0x00,
    0xa0, 0xfb, 0xe2, 0x10, 0x79, 0xf8, 0x65, 0x8c, 0xb9, 0x4f, 0xb2, 0xfe,
    0x21, 0x00, 0xe8, 0xb8, 0xfd, 0x8b, 0xcc, 0x7e, 0xd6, 0x21, 0xac, 0x93,
    0xac, 0x7f, 0x08, 0x00, 0x9e, 0x1c, 0xfe, 0x7e, 0xed, 0xf5, 0x0f, 0x01,
    0xc0, 0x51, 0x13, 0xe7, 0x22, 0x37, 0x7c, 0xfe, 0xcf, 0x3a, 0xe1, 0x00,
    0x24, 0xbd, 0x33, 0xdc, 0x4f, 0xb3, 0x59, 0xd6, 0x35, 0x05, 0xd1, 0xf4,
    0x99, 0xa4, 0xfb, 0x75, 0xbd, 0xe6, 0xca, 0x3e, 0xd1, 0xa5, 0x50, 0xf5,
    0xdf, 0x0e, 0xbd, 0xf5, 0x15, 0x3d, 0x00, 0xce, 0x31, 0x17, 0xaa, 0x7f,
    0xb6, 0x4d, 0x13, 0x12, 0xfe, 0x9a, 0x04, 0x00, 0x07, 0xcc, 0x9c, 0xcb,
    0xad, 0xc8, 0x00, 0x38, 0xe9, 0xfa, 0x87, 0x00, 0xe0, 0xc8, 0xf0, 0x57,
    0xa8, 0xfe, 0x31, 0x49, 0x2e, 0x80, 0x23, 0x00, 0xe8, 0xea, 0x01, 0x84,
    0xea, 0x9f, 0xaa, 0x6d, 0xab, 0x10, 0x08, 0x00, 0x34, 0x29, 0xe4, 0xea,
    0x9f, 0x6d, 0xaa, 0xd3, 0xff, 0x04, 0x00, 0xcf, 0x51, 0xff, 0x3c, 0xa4,
    0x5d, 0xff, 0x10, 0x00, 0x1c, 0xaa, 0x7f, 0x84, 0x02, 0x10, 0x8c, 0x59,
    0x25, 0xdf, 0x03, 0x24, 0x7d, 0x3e, 0x40, 0xe3, 0xbd, 0xe9, 0xea, 0x8b,
    0x7b, 0xed, 0x4f, 0x3f, 0x99, 0x4e, 0xd7, 0xdb, 0xed, 0xb3, 0x7d, 0x7e,
    0x8d, 0xed, 0x57, 0xbb, 0x9d, 0xcf, 0xf3, 0xe6, 0xe4, 0x0b, 0xf7, 0x89,
    0xdf, 0xbf, 0x0a, 0x21, 0x9f, 0x4c, 0xf2, 0xb4, 0x7f, 0x1f, 0x7a, 0x00,
    0x3c, 0xb2, 0xcc, 0x32, 0x2b, 0xd4, 0x54, 0x99, 0xfc, 0xed, 0x9f, 0x00,
    0xe0, 0x73, 0x0b, 0x2f, 0xb6, 0x38, 0x20, 0xb5, 0xf7, 0xdf, 0x09, 0x00,
    0x4e, 0x28, 0x39, 0xe4, 0x46, 0xc0, 0x1b, 0x7a, 0x00, 0xe8, 0xe2, 0xac,
    0x95, 0x5a, 0x00, 0xd7, 0x1a, 0xb3, 0x4f, 0xfb, 0x09, 0x00, 0x01, 0xc0,
    0xe7, 0xe6, 0xce, 0x49, 0x0d, 0x00, 0xf6, 0x1a, 0xea, 0x1f, 0x02, 0x80,
    0xc7, 0xf5, 0x8f, 0x13, 0xbb, 0x1e, 0x2a, 0x02, 0x00, 0x75, 0x26, 0x72,
    0x03, 0x80, 0x1d, 0x01, 0x80, 0x3a, 0x85, 0x95, 0xaa, 0x80, 0x28, 0x81,
    0xa0, 0x8d, 0xb7, 0x36, 0x93, 0x0b, 0xc0, 0x4e, 0xc3, 0x08, 0x98, 0x00,
    0xe0, 0x8b, 0x0c, 0x00, 0x9a, 0x10, 0x1a, 0x02, 0x00, 0x65, 0x03, 0x00,
    0xc1, 0x11, 0xb0, 0x92, 0xab, 0x9f, 0x00, 0xe0, 0x7f, 0x03, 0x00, 0xb9,
    0x00, 0xd4, 0x4a, 0x06, 0x00, 0x04, 0x00, 0x8f, 0xc6, 0x00, 0x62, 0x01,
    0xa0, 0x07, 0x00, 0x01, 0x20, 0x00, 0x30, 0x8a, 0xae, 0x03, 0xc1, 0x29,
    0xa0, 0xbd, 0x9e, 0x00, 0x24, 0x7d, 0x3e, 0x40, 0x96, 0xe7, 0xdd, 0xfb,
    0x02, 0xf5, 0xd9, 0x74, 0x72, 0x97, 0xde, 0xfe, 0xf4, 0x89, 0xb4, 0x3f,
    0x73, 0xee, 0xe3, 0x0e, 0x4b, 0x59, 0xcf, 0xcd, 0xd0, 0x0f, 0xfe, 0xfe,
    0x9b, 0xed, 0xb6, 0x3c, 0x32, 0x0c, 0xe0, 0x7c, 0x00, 0x7c, 0xe5, 0x23,
    0x60, 0xa3, 0xe7, 0x29, 0x18, 0x01, 0x80, 0xfc, 0x00, 0xa0, 0x35, 0xa6,
    0xd5, 0xf3, 0xc5, 0x09, 0x00, 0x8c, 0x31, 0xc6, 0xcb, 0xf5, 0x00, 0xad,
    0x9e, 0x01, 0x00, 0x01, 0xc0, 0xbf, 0xc3, 0x2d, 0xc1, 0x1e, 0x40, 0x55,
    0x00, 0x92, 0xde, 0x1c, 0xf7, 0xb7, 0x13, 0x5e, 0x60, 0xef, 0x3b, 0x48,
    0x92, 0x5a, 0xee, 0xf8, 0xe3, 0x7c, 0x7e, 0x70, 0xf7, 0x84, 0xde, 0x83,
    0xc8, 0x9e, 0x7f, 0x7f, 0xb0, 0xfd, 0xbf, 0xca, 0x72, 0x13, 0x57, 0x76,
    0x8f, 0x36, 0x00, 0xf4, 0x00, 0x10, 0xbe, 0x0e, 0xda, 0xb1, 0x7e, 0x71,
    0x68, 0x0e, 0x80, 0x5c, 0x0f, 0x10, 0xe8, 0x01, 0xa0, 0x8e, 0x15, 0x0c,
    0x00, 0x3d, 0x00, 0xf4, 0x05, 0x40, 0xae, 0x29, 0x02, 0x80, 0x71, 0x07,
    0x80, 0x12, 0x08, 0x63, 0x46, 0x0f, 0x00, 0x3a, 0x13, 0x02, 0x00, 0x10,
    0x00, 0x8c, 0xb0, 0x6e, 0xa1, 0x07, 0xc0, 0xb8, 0x03, 0x60, 0x35, 0x45,
    0xc0, 0xb3, 0x3e, 0xfe, 0xbc, 0xf6, 0x7d, 0x51, 0x64, 0x87, 0x16, 0x90,
    0xf5, 0x7a, 0x3f, 0xc1, 0x08, 0xad, 0xbf, 0xdf, 0xef, 0x76, 0xc7, 0xf6,
    0x22, 0x3f, 0xf1, 0xf7, 0x71, 0x79, 0xfe, 0xf1, 0xeb, 0xc4, 0x7f, 0xfe,
    0xdc, 0xb9, 0xe9, 0xf1, 0x89, 0x20, 0xce, 0x07, 0x40, 0x92, 0x3d, 0x80,
    0xdc, 0xdc, 0xa5, 0xae, 0x1e, 0x80, 0x00, 0xc0, 0x18, 0xd1, 0x05, 0x3c,
    0xba, 0x2e, 0x29, 0x02, 0x00, 0x63, 0x44, 0x97, 0x70, 0xd2, 0x03, 0x40,
    0x1f, 0xc1, 0x8d, 0xdc, 0x32, 0x55, 0x5f, 0x9c, 0x00, 0x40, 0x38, 0x00,
    0x8e, 0x1e, 0x00, 0xea, 0x08, 0xee, 0xe4, 0x63, 0x45, 0x5f, 0xaf, 0x21,
    0x00, 0x78, 0x0e, 0xb2, 0xbb, 0x79, 0x2a, 0xaa, 0x82, 0x08, 0x00, 0xe4,
    0x03, 0x90, 0x3b, 0x47, 0x00, 0xa0, 0x6c, 0x0c, 0x20, 0x38, 0x13, 0x9a,
    0x53, 0x02, 0x41, 0xdf, 0x30, 0x40, 0x6e, 0x37, 0x2b, 0xaf, 0x27, 0x00,
    0x9e, 0xff, 0xf8, 0xf3, 0xfc, 0x71, 0xe4, 0x91, 0x7b, 0x6a, 0x8f, 0xfa,
    0x7b, 0x55, 0x41, 0x05, 0x25, 0x10, 0xc6, 0x3b, 0x0c, 0x90, 0xeb, 0x01,
    0x98, 0x05, 0x82, 0x3e, 0x82, 0xe7, 0x3a, 0x32, 0x06, 0xc0, 0xa8, 0x03,
    0x90, 0x59, 0xab, 0xe5, 0xc2, 0x4a, 0x7a, 0x0c, 0x70, 0xbd, 0x5c, 0x76,
    0x76, 0xa6, 0xbd, 0x96, 0x13, 0xff, 0x7e, 0xc2, 0x56, 0x73, 0xa3, 0xb5,
    0x17, 0x9d, 0x08, 0x9a, 0x3a, 0xb7, 0xd1, 0xb0, 0x47, 0x34, 0xe7, 0x03,
    0x7c, 0xc1, 0xcf, 0xaf, 0xae, 0xfd, 0x8d, 0x73, 0xcb, 0x9e, 0xed, 0x1f,
    0xfb, 0xfd, 0x6d, 0x55, 0x95, 0x87, 0xfe, 0x89, 0xf3, 0x01, 0x90, 0x70,
    0x15, 0x74, 0xe4, 0xad, 0x9a, 0x73, 0x7a, 0x80, 0x4c, 0xc7, 0xe3, 0x60,
    0x02, 0x80, 0x4f, 0xb6, 0x72, 0x01, 0x28, 0x94, 0xcc, 0x84, 0x12, 0x00,
    0x7c, 0xb2, 0x16, 0x0c, 0x00, 0x3d, 0x00, 0xd4, 0xa9, 0x43, 0x90, 0x5a,
    0x14, 0xe4, 0x44, 0x8f, 0x9e, 0x27, 0x00, 0x78, 0x26, 0xa5, 0x5c, 0x27,
    0xb0, 0xd0, 0xd0, 0x09, 0x10, 0x00, 0x7c, 0xa9, 0x61, 0xc0, 0x94, 0x00,
    0x40, 0x9d, 0x07, 0xb9, 0xc9, 0x7b, 0x02, 0x00, 0x7d, 0x9a, 0x10, 0xa4,
    0x0e, 0x39, 0xcd, 0x9d, 0x4b, 0x7f, 0x51, 0x10, 0x01, 0xc0, 0xe7, 0x36,
    0x42, 0x55, 0x90, 0x35, 0x66, 0x99, 0x7c, 0x27, 0x40, 0x00, 0xf0, 0x39,
    0xc1, 0xc9, 0xd0, 0x85, 0xf7, 0x04, 0x00, 0xca, 0x94, 0x6d, 0x2b, 0xf5,
    0x8e, 0xfc, 0x8c, 0x1e, 0x00, 0x1a, 0x49, 0xcd, 0x05, 0x15, 0xce, 0x25,
    0xfe, 0x76, 0x18, 0x01, 0xc0, 0xa1, 0x2a, 0xa8, 0xae, 0xa5, 0x9a, 0xba,
    0x4c, 0xbb, 0x0a, 0x22, 0x00, 0x38, 0xe0, 0xa1, 0x6d, 0xa5, 0xb6, 0xca,
    0x5a, 0x10, 0x00, 0xa8, 0xcc, 0x80, 0x50, 0x15, 0x34, 0x4f, 0x7b, 0x18,
    0x90, 0xf4, 0xf9, 0x00, 0x8d, 0xf7, 0x46, 0xf4, 0x85, 0x98, 0xc9, 0x74,
    0xba, 0xee, 0xf9, 0x4e, 0xcc, 0x68, 0xdf, 0x1f, 0x78, 0x57, 0x55, 0x8b,
    0xf9, 0xbc, 0xf3, 0xef, 0x3b, 0x7f, 0xff, 0xcc, 0x98, 0x57, 0x8b, 0xc5,
    0x7f, 0x53, 0xab, 0x9c, 0x0f, 0x00, 0x1d, 0x36, 0x4d, 0x23, 0xf5, 0x44,
    0x2c, 0xe5, 0xa7, 0x01, 0x04, 0x00, 0x47, 0xad, 0x7a, 0x9e, 0x16, 0xa3,
    0xb1, 0x0a, 0x22, 0x00, 0x38, 0xea, 0xb6, 0xaa, 0x44, 0x06, 0xc2, 0xde,
    0xda, 0x59, 0xaa, 0x4b, 0xa3, 0x09, 0x00, 0x8e, 0xaa, 0x42, 0xd8, 0x08,
    0xcd, 0x87, 0x2e, 0x53, 0x9d, 0x0b, 0x22, 0x00, 0x78, 0xca, 0x9d, 0x50,
    0x15, 0x94, 0xec, 0xbb, 0x01, 0x04, 0x00, 0x4f, 0xb9, 0xaf, 0x6b, 0x91,
    0x1d, 0xe3, 0xbc, 0xb5, 0xf3, 0x24, 0xab, 0x20, 0x02, 0x80, 0x0e, 0x1f,
    0x84, 0x3a, 0x81, 0x8b, 0x24, 0xab, 0x20, 0x02, 0x80, 0x0e, 0x37, 0x55,
    0x25, 0x72, 0x84, 0xde, 0xc2, 0x7b, 0x4b, 0x00, 0xa0, 0x4e, 0x13, 0xc2,
    0x4a, 0x62, 0x28, 0xec, 0x92, 0x7c, 0x20, 0x40, 0x00, 0xd0, 0xed, 0xfd,
    0x7e, 0x2f, 0x32, 0x1f, 0x9a, 0xe0, 0xc2, 0x38, 0x02, 0x80, 0x6e, 0xbb,
    0xb6, 0x7d, 0x90, 0xe8, 0x04, 0xa6, 0x59, 0x56, 0x24, 0xb6, 0x3a, 0x3a,
    0xe9, 0x95, 0x7a, 0xbf, 0xac, 0xd7, 0xdd, 0xbf, 0x69, 0xcf, 0xb5, 0x22,
    0x38, 0xb3, 0x13, 0xd8, 0xed, 0xe2, 0xe7, 0xf2, 0xad, 0x31, 0xaf, 0x8a,
    0xe2, 0xcd, 0x6e, 0x47, 0x0f, 0x00, 0x65, 0x36, 0x6d, 0x2b, 0xf2, 0x96,
    0xcc, 0x45, 0x9e, 0x27, 0xd5, 0x05, 0x10, 0x00, 0xf4, 0xe8, 0x04, 0x04,
    0x4a, 0x0e, 0x6b, 0x93, 0x1a, 0x09, 0x10, 0x00, 0x9c, 0x6a, 0xd5, 0x34,
    0x22, 0x9d, 0xc0, 0x55, 0x51, 0xa4, 0xf3, 0xa5, 0xfc, 0xa8, 0xf6, 0xbf,
    0xa7, 0xfd, 0xc8, 0xf6, 0x57, 0xc6, 0x2c, 0x1f, 0xbf, 0x00, 0xd0, 0xf4,
    0x7c, 0x4c, 0x96, 0xe5, 0xf9, 0x32, 0xcf, 0x5f, 0x9c, 0x7c, 0x20, 0x0d,
    0xe7, 0x03, 0x20, 0x21, 0x0f, 0x6d, 0x5b, 0x4a, 0xac, 0x8c, 0x78, 0x99,
    0x4c, 0x15, 0x44, 0x00, 0xd0, 0xcf, 0xcd, 0x7e, 0x1f, 0xdf, 0xc8, 0xc2,
    0x7b, 0x47, 0x00, 0xa0, 0x91, 0xc8, 0x74, 0x90, 0x33, 0xe6, 0xaa, 0xcf,
    0xbb, 0xac, 0x04, 0x00, 0x09, 0x79, 0x2f, 0xb1, 0x3c, 0xee, 0x32, 0x8d,
    0xa5, 0x41, 0x04, 0x00, 0xbd, 0x95, 0x6d, 0x1b, 0xbf, 0x67, 0x44, 0x66,
    0x6d, 0x0a, 0x23, 0x01, 0x02, 0x80, 0x73, 0xbc, 0x93, 0x58, 0x1d, 0x74,
    0x99, 0xc0, 0x43, 0x31, 0x02, 0x80, 0x73, 0x54, 0x12, 0x4b, 0x44, 0x73,
    0x6b, 0x2f, 0x86, 0x5e, 0x1f, 0x4a, 0x00, 0x70, 0x7e, 0x27, 0x10, 0xbf,
    0x7b, 0xdc, 0xe0, 0x0f, 0xc5, 0x08, 0x00, 0xce, 0xd4, 0x4a, 0xbc, 0x31,
    0x9c, 0x5b, 0x7b, 0x39, 0x68, 0x27, 0x40, 0x00, 0x70, 0xbe, 0xbb, 0xba,
    0x8e, 0xdf, 0x3c, 0xeb, 0xe5, 0xa0, 0x9d, 0x00, 0x01, 0xc0, 0xf9, 0x82,
    0x31, 0x7f, 0x47, 0xaf, 0x90, 0x2b, 0x06, 0x1d, 0x09, 0x10, 0x00, 0x44,
    0x59, 0xd5, 0x75, 0xfc, 0xbb, 0x32, 0xaf, 0x8a, 0xc2, 0x12, 0x00, 0x28,
    0xf5, 0xa6, 0x2c, 0x23, 0xcb, 0xa0, 0x7c, 0xb8, 0x35, 0xd2, 0x04, 0x00,
    0xb1, 0xf6, 0x21, 0xdc, 0x46, 0x17, 0x42, 0x57, 0x03, 0x3d, 0x13, 0x20,
    0x00, 0x10, 0xf0, 0x76, 0xbf, 0x8f, 0x1c, 0x0d, 0x7b, 0x6b, 0x07, 0x59,
    0x1d, 0xe4, 0x59, 0x1f, 0x4f, 0xfb, 0x22, 0xed, 0xff, 0xd9, 0x34, 0xe6,
    0x84, 0xf5, 0x11, 0xe5, 0x6a, 0x95, 0xd4, 0xe7, 0xa7, 0x07, 0xc0, 0xa8,
    0x11, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00,
    0x01, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x80,
    0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x34, 0xe3, 0x7c,
    0x00, 0xda, 0x1f, 0x75, 0xfb, 0xf4, 0x00, 0xa0, 0x04, 0x02, 0x08, 0x00,
    0x40, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x04, 0x00,
    0x20, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00,
    0x10, 0x00, 0x80, 0x00, 0x00, 0x4a, 0x71, 0x3e, 0x00, 0xed, 0x8f, 0xba,
    0x7d, 0x7a, 0x00, 0x50, 0x02, 0x01, 0x04, 0x00, 0x20, 0x00, 0x00, 0x01,
    0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x80, 0x00,
    0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00,
    0x00, 0xa5, 0x38, 0x1f, 0x80, 0xf6, 0x47, 0xdd, 0x3e, 0x3d, 0x00, 0x28,
    0x81, 0x00, 0x02, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x04, 0x00, 0x20,
    0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x10,
    0x00, 0x80, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x80, 0x52, 0xff, 0x00,
    0xb1, 0xce, 0xd3, 0x36, 0xaa, 0x71, 0xdc, 0x5d, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

/*static*/ const uint8_t MapTiles::TILE_NOPE_PNG[] =
{
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x5c, 0x72, 0xa8, 0x66, 0x00, 0x00, 0x02,
    0xd9, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0xdb, 0xb1, 0x0d, 0xc3,
    0x30, 0x00, 0x03, 0x41, 0x25, 0x60, 0xe1, 0x49, 0xbc, 0xff, 0x78, 0xee,
    0x92, 0x21, 0x52, 0x84, 0x00, 0xef, 0x7a, 0x81, 0xdd, 0x43, 0x2a, 0xf4,
    0xba, 0xef, 0xfb, 0x73, 0x7e, 0xf0, 0x3c, 0xcf, 0x2f, 0xc7, 0xcf, 0x75,
    0x5d, 0xc7, 0xbe, 0x7d, 0xfb, 0xff, 0xd9, 0x7f, 0x1f, 0x60, 0x96, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xed, 0xe2, 0x3f, 0xb5, 0x7d, 0xfb,
    0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7, 0xbf, 0xbb, 0xef, 0x06, 0x00, 0x9e,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xb5, 0xe2, 0x3f, 0xb5, 0x7d,
    0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7, 0xbf, 0xbb, 0xef, 0x06, 0x00,
    0x9e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xb5, 0xe2, 0x3f, 0xb5,
    0x7d, 0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09, 0x00, 0x08, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7, 0xbf, 0xbb, 0xef, 0x06,
    0x00, 0x9e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xb5, 0xe2, 0x3f,
    0xb5, 0x7d, 0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7, 0xbf, 0xbb, 0xef,
    0x06, 0x00, 0x9e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xb5, 0xe2,
    0x3f, 0xb5, 0x7d, 0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7, 0xbf, 0xbb,
    0xef, 0x06, 0x00, 0x9e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0xb5,
    0xe2, 0x3f, 0xb5, 0x7d, 0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7, 0xbf,
    0xbb, 0xef, 0x06, 0x00, 0x9e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0xb5, 0xe2, 0x3f, 0xb5, 0x7d, 0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0, 0x09,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x50, 0x2b, 0xfe, 0x53, 0xdb, 0xb7,
    0xbf, 0xbb, 0xef, 0x06, 0x00, 0x9e, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0xb5, 0xe2, 0x3f, 0xb5, 0x7d, 0xfb, 0xbb, 0xfb, 0x6e, 0x00, 0xe0,
    0x09, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x50, 0xeb, 0x0b, 0xa9, 0x71,
    0x83, 0x86, 0x41, 0x0a, 0x1c, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

/*static*/ const uint8_t MapTiles::TILE_TEST_PNG[] =
{
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x5c, 0x72, 0xa8, 0x66, 0x00, 0x00, 0x00,
    0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xa0,
    0xbd, 0xa7, 0x93, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00,
    0x00, 0x2e, 0x23, 0x00, 0x00, 0x2e, 0x23, 0x01, 0x78, 0xa5, 0x3f, 0x76,
    0x00, 0x00, 0x03, 0x32, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0xdc,
    0x41, 0x51, 0x05, 0x31, 0x10, 0x45, 0xd1, 0x69, 0x7c, 0xf0, 0x8c, 0xc4,
    0x00, 0x66, 0x50, 0x83, 0x92, 0xec, 0x50, 0x12, 0x03, 0x08, 0x01, 0x11,
    0xbd, 0xf8, 0x9d, 0xe2, 0x9c, 0xfd, 0xd4, 0xdb, 0xdd, 0x4a, 0x16, 0x93,
    0x3a, 0x6b, 0xff, 0x3e, 0x0d, 0x1f, 0x3f, 0x9f, 0x9d, 0xcf, 0x9f, 0xef,
    0xf7, 0xaf, 0xc7, 0xbe, 0x7d, 0xfb, 0xaf, 0xd9, 0x7f, 0x7b, 0x80, 0x7f,
    0x4b, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40,
    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01,
    0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x80, 0xe9, 0x2a, 0x49, 0xeb,
    0x3d, 0x00, 0xff, 0x73, 0xdb, 0xb7, 0x7f, 0xef, 0xbe, 0x13, 0x00, 0xb8,
    0x02, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x8c, 0x55, 0x67, 0xed, 0xd6,
    0x7b, 0x00, 0xfe, 0xe7, 0xb6, 0x6f, 0xff, 0xde, 0x7d, 0x27, 0x00, 0x70,
    0x05, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04,
    0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00,
    0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x18, 0xab, 0x92, 0xb4, 0xde,
    0x03, 0xf0, 0x3f, 0xb7, 0x7d, 0xfb, 0xf7, 0xee, 0x3b, 0x01, 0x80, 0x2b,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0xc0, 0x58, 0x75, 0xd6, 0x6e, 0xbd,
    0x07, 0xe0, 0x7f, 0x6e, 0xfb, 0xf6, 0xef, 0xdd, 0x77, 0x02, 0x00, 0x57,
    0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00,
    0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x80, 0xb1, 0x2a, 0x49, 0xeb, 0x3d,
    0x00, 0xff, 0x73, 0xdb, 0xb7, 0x7f, 0xef, 0xbe, 0x13, 0x00, 0xb8, 0x02,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x8c, 0x55, 0x67, 0xed, 0xd6, 0x7b,
    0x00, 0xfe, 0xe7, 0xb6, 0x6f, 0xff, 0xde, 0x7d, 0x27, 0x00, 0x70, 0x05,
    0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40,
    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x18, 0xab, 0x92, 0xb4, 0xde, 0x03,
    0xf0, 0x3f, 0xb7, 0x7d, 0xfb, 0xf7, 0xee, 0x3b, 0x01, 0x80, 0x2b, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0xc0, 0x58, 0x75, 0xd6, 0x6e, 0xbd, 0x07,
    0xe0, 0x7f, 0x6e, 0xfb, 0xf6, 0xef, 0xdd, 0x77, 0x02, 0x00, 0x57, 0x00,
    0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04,
    0x00, 0x10, 0x00, 0x40, 0x00, 0x80, 0xb1, 0x2a, 0x49, 0xeb, 0x3d, 0x00,
    0xff, 0x73, 0xdb, 0xb7, 0x7f, 0xef, 0xbe, 0x13, 0x00, 0xb8, 0x02, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x8c, 0x55, 0x67, 0xed, 0xd6, 0x7b, 0x00,
    0xfe, 0xe7, 0xb6, 0x6f, 0xff, 0xde, 0x7d, 0x27, 0x00, 0x70, 0x05, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10,
    0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00,
    0x00, 0x01, 0x00, 0x04, 0x00, 0x18, 0xab, 0x92, 0xb4, 0xde, 0x03, 0xf0,
    0x3f, 0xb7, 0x7d, 0xfb, 0xf7, 0xee, 0x3b, 0x01, 0x80, 0x2b, 0x00, 0x20,
    0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00,
    0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00,
    0x08, 0x00, 0x20, 0x00, 0xc0, 0x58, 0x75, 0xd6, 0x6e, 0xbd, 0x07, 0xe0,
    0x7f, 0x6e, 0xfb, 0xf6, 0xef, 0xdd, 0x77, 0x02, 0x00, 0x57, 0x00, 0x40,
    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01,
    0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x40, 0x00, 0x80, 0xb1, 0x2a, 0x49, 0xeb, 0x3d, 0x00, 0xff,
    0x73, 0xdb, 0xb7, 0x7f, 0xef, 0xbe, 0x13, 0x00, 0xb8, 0x02, 0x00, 0x02,
    0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00,
    0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80,
    0x00, 0x00, 0x02, 0x00, 0x8c, 0x55, 0x67, 0xed, 0xd6, 0x7b, 0x00, 0xfe,
    0xe7, 0xb6, 0x6f, 0xff, 0xde, 0x7d, 0x27, 0x00, 0x70, 0x05, 0x00, 0x04,
    0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00,
    0x40, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x18, 0xab, 0x92, 0xb4, 0xde, 0x03, 0xf0, 0x3f,
    0xb7, 0x7d, 0xfb, 0xf7, 0xee, 0x3b, 0x01, 0x80, 0x2b, 0x00, 0x20, 0x00,
    0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
    0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08,
    0x00, 0x20, 0x00, 0xc0, 0x58, 0x7f, 0xfd, 0xb1, 0x8a, 0xd0, 0x36, 0x4a,
    0xe4, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
};


